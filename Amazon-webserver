provider "aws" {
  region = "us-east-1"
}

# Create a new VPC
resource "aws_vpc" "amazon_vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "amazon-vpc"
  }
}

# Create two public subnets in different availability zones
resource "aws_subnet" "public_subnet_a" {
  vpc_id                  = aws_vpc.amazon_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true

  tags = {
    Name = "public-subnet-a"
  }
}

resource "aws_subnet" "public_subnet_b" {
  vpc_id                  = aws_vpc.amazon_vpc.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = true

  tags = {
    Name = "public-subnet-b"
  }
}

# Create an Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.amazon_vpc.id

  tags = {
    Name = "amazon-igw"
  }
}

# Create a route table
resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.amazon_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "amazon-public-route-table"
  }
}

# Associate the public route table with both subnets
resource "aws_route_table_association" "public_subnet_a_association" {
  subnet_id      = aws_subnet.public_subnet_a.id
  route_table_id = aws_route_table.public_route_table.id
}

resource "aws_route_table_association" "public_subnet_b_association" {
  subnet_id      = aws_subnet.public_subnet_b.id
  route_table_id = aws_route_table.public_route_table.id
}

# Security group for EC2 and Load Balancer
resource "aws_security_group" "web_sg" {
  name        = "web-sg"
  description = "Allow web traffic"
  vpc_id      = aws_vpc.amazon_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create EC2 Instances
resource "aws_instance" "web" {
  count         = 2
  ami           = "ami-0fff1b9a61dec8a5f" # Provided Amazon Linux AMI
  instance_type = "t2.micro"
  associate_public_ip_address = true
  subnet_id     = element([aws_subnet.public_subnet_a.id, aws_subnet.public_subnet_b.id], count.index)

  user_data = <<-EOF
              #!/bin/bash
              yum install httpd git -y
              systemctl start httpd
              systemctl enable httpd
              cd /var/www/html
              git clone https://github.com/Ironhack-Archive/online-clone-amazon.git
              mv amazon-clone/* .
              EOF

  tags = {
    Name = "amazon-web-server-${count.index}"
  }

  vpc_security_group_ids = [aws_security_group.web_sg.id]
}

# Load Balancer
resource "aws_lb" "web_lb" {
  name               = "amazon-app-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.web_sg.id]
  subnets            = [aws_subnet.public_subnet_a.id, aws_subnet.public_subnet_b.id]
}

# Target Group for Load Balancer
resource "aws_lb_target_group" "web_tg" {
  name     = "web-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.amazon_vpc.id
}

# Load Balancer Listener
resource "aws_lb_listener" "web_listener" {
  load_balancer_arn = aws_lb.web_lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.web_tg.arn
  }
}

# Attach EC2 Instances to the Target Group
resource "aws_lb_target_group_attachment" "web_attachment" {
  count            = 2
  target_group_arn = aws_lb_target_group.web_tg.arn
  target_id        = aws_instance.web[count.index].id
  port             = 80
}

output "load_balancer_dns_name" {
  value = aws_lb.web_lb.dns_name
}
